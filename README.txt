Описание к тестовому заданию

# Описание проекта

Данный проект представляет собой приложение, которое использует два потока для выполнения различных задач: интерфейсный воркер и обработчик файлов. Интерфейсный воркер отвечает за взаимодействие с графическим интерфейсом пользователя (GUI), а обработчик файлов выполняет обработку данных из файла.

## Структура проекта

Проект состоит из следующих основных компонентов:

1. `interfaceWorker.h` и `interfaceWorker.cpp` - содержат реализацию класса `interfaceWorker`, который отвечает за взаимодействие с GUI.
2. `fileHandlerWorker.h` и `fileHandlerWorker.cpp` - содержат реализацию класса `fileHandlerWorker`, который отвечает за обработку данных из файла.
3. `threadController.h` и `threadController.cpp` - содержат реализацию класса `threadController`, который управляет потоками для `interfaceWorker` и `fileHandlerWorker`.

## Как работает приложение

Приложение использует два потока для выполнения различных задач:

1. **Поток интерфейсного воркера**: Этот поток отвечает за взаимодействие с GUI. Он получает команды от пользователя через GUI, отправляет данные в GUI и управляет состоянием пользовательского интерфейса.

2. **Поток обработчика файлов**: Этот поток отвечает за обработку данных из файлов. Он получает команды от интерфейсного воркера, открывает файлы, обрабатывает данные и отправляет обратно обновленные данные в интерфейсный воркер.

Класс `threadController` отвечает за создание и управление этими двумя потоками. Он устанавливает связи между сигналами и слотами интерфейсного воркера и обработчика файлов, чтобы они могли взаимодействовать друг с другом.

## Как изменить/расширить функциональность

Если вы хотите изменить или расширить функциональность данного приложения, вам нужно будет внести изменения в следующие компоненты:

1. **interfaceWorker**: Здесь вы можете добавить или изменить сигналы и слоты, отвечающие за взаимодействие с GUI. Вы также можете изменить логику обработки данных, отправляемых в GUI.

2. **fileHandlerWorker**: Здесь вы можете добавить или изменить функциональность по обработке данных из файлов. Вы можете добавить новые методы для обработки различных типов данных, изменить алгоритмы обработки и т.д.

3. **threadController**: Если вам нужно изменить логику управления потоками, вы можете внести изменения в этот класс. Например, вы можете добавить новые типы потоков или изменить связи между сигналами и слотами.

Помните, что при внесении изменений в один из компонентов вам может потребоваться внести соответствующие изменения в другие компоненты, чтобы обеспечить корректное взаимодействие между ними.

## Как собрать и запустить приложение

Для сборки и запуска приложения вам потребуется среда разработки, поддерживающая Qt-фреймворк, например, Qt Creator 5.13.2. Выполните следующие шаги:

1. Клонируйте репозиторий проекта.
2. Откройте проект в Qt Creator.
3. Убедитесь, что все необходимые библиотеки Qt установлены.
4. Соберите проект, используя команду "Build".
5. Запустите приложение, используя команду "Run".
